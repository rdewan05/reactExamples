import React, { Component } from 'react';
import './App.css';
import Persons from '../components/Persons/Persons';
import Cockpit from '../components/Cockpit/Cockpit';
import withClass from '../hoc/withClass';
import Auxiliary from '../hoc/Auxiliary';
import AuthContext from '../context/auth-context';

class App extends Component {

  constructor(props){
    super(props);
    console.log('[App.js] constructor');
  }

  state = {
    persons: [{ id: 'a', name: 'Richa', age: 20 },
    { id: 'b', name: 'Dewan', age: 22 }],
    showPersons: false,
    showCockpit: true,
    setCounter: 0,
    authenticated: false
  }

  clickHandler = (newName) => {
    //console.log('was clicked!');
    this.setState({
      persons: [{ name: newName, age: 20 },
      { name: 'Dewan', age: 22 }]
    });
  }

  /*nameChangedHandler = (event) => {
    this.setState({
      persons: [
        { name: 'Richa', age: 20 },
        { name: event.target.value, age: 22 }

      ]
    });
  }*/

  nameChangedHandler = (event, id) => {

    const pIndex = this.state.persons.findIndex(p =>{
      return p.id === id
    });

    //const persons = this.state.persons(pIndex);

    const person = {
      ...this.state.persons[pIndex]};

    person.name = event.target.value;

    const persons = [...this.state.persons];
    persons[pIndex] = person;

   //setting state way 1

    /* this.setState({
    
    persons: persons,
    setCounter: this.state.setCounter +1});
  } */


  //setting state correctly way 2
  this.setState((prevState, props) => {
    return {
       persons: persons,
       setCounter: prevState.setCounter +1};
    });
  };
  
  deletePersonsHandler = (personIndex) => {
    //objects and arrays in js are reference types
    //use state in immutable way
    //const persons = this.state.persons;

    //const persons = this.state.persons.slice();

    //slice method would create a copy of the array

    //alternatively use ES6 way - spread operator - copy of contents 

    const persons = [...this.state.persons];
    persons.splice(personIndex, 1);
    this.setState({ persons });
  }

  togglePersonsHandler = () => {
    const doesShow = this.state.showPersons;
    this.setState({ showPersons: !doesShow });
  }

  loginHandler = () =>{
    this.setState({
      authenticated : true
    });
  }

  static getDerivedStateFromProps(props, state){
    console.log('[App.js] getDerivedStateFromProps', props);
    return state;
  }

  componentDidMount(){
    console.log('[App.js] componentDidMount');
  }

  shouldComponentUpdate(nextProps, nextState){
    console.log('[App.js] shouldComponentUpdate');
    return true;
  }

  componentDidUpdate(){
    console.log('[App.js] componentDidUpdate');
  }


  render() {
     
    console.log('[App.js] render ');
    /*const style = {
      backgroundColor: 'white',
      font: 'inherit',
      border: '1px solid blue',
      padding: '8px',
      cursor: 'pointer'
    };*/

    let persons = null;

    /*if (this.state.showPersons) {
      persons = (
        <div>
          <Person name={this.state.persons[0].name} age={this.state.persons[0].age} click={this.clickHandler.bind(this, 'RD')}> My Hobbies : Racing</Person>
          <Person name={this.state.persons[1].name} age={this.state.persons[1].age} changed={this.nameChangedHandler}></Person>
        </div>
      );
    } */
   /*
    if (this.state.showPersons) {
      persons = (
        <div>
          {
            this.state.persons.map((person, personIndex) => {
              return <Person 
              key={person.id} 
              click={() => this.deletePersonsHandler(personIndex)} 
              name={person.name} age={person.age} 
              changed={(event) => this.nameChangedHandler(event, person.id)}>
                
              </Person>
            })
          } 
        </div>
      );
    }*/


    if (this.state.showPersons) {
      persons = (
        <div>
          <Persons 
          persons ={this.state.persons}
          clicked={this.deletePersonsHandler}
          changed = {this.nameChangedHandler}
          isAuthenticated = {this.state.authenticated}  >
          </Persons>
        </div>
      );
    }

    return (
      <Auxiliary>
        <button 
        onClick={()=>{this.setState({showCockpit: false});
      }}>
        Remove Cockpit</button>

        <AuthContext.Provider value = {
          {
          authenticated : this.state.authenticated,
          login: this.loginHandler
          }} >

        {this.state.showCockpit ? 
        (<Cockpit
          //login={this.loginHandler} 
          title={this.props.appTitle} 
          toggle={this.togglePersonsHandler}/> 
        ) : null}
        {persons}

        </AuthContext.Provider>

      </Auxiliary>
    );
  }
}

export default withClass(App, "App");

