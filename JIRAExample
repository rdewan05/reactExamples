import React, { Component } from "react";
import "./index.css";

export default class KanbanBoard extends Component {
    constructor() {
        super();
        // Each task is uniquely identified by its name. 
        // Therefore, when you perform any operation on tasks, make sure you pick tasks by names (primary key) instead of any kind of index or any other attribute.
        this.state = {
            searchTerm: '',
            tasks: [
                { name: '1', stage: 0 },
                { name: '2', stage: 0 },
            ]
        };
        this.stagesNames = ['Backlog', 'To Do', 'Ongoing', 'Done'];
    }

    searchHandler = (e) => {
        this.setState({ searchTerm: e.target.value });
    }

    clickAddTaskHandler = () => {
        var new_task = { name: this.state.searchTerm, stage: 0 };
        var existing_tasks = this.state.tasks;
        existing_tasks.push(new_task);
        this.setState({ searchTerm: '', tasks: existing_tasks });
    }

    arrowForwardHandler = (e) => {
        var taskNameArr = e.currentTarget.dataset.testid.split('-');
        var taskItem = taskNameArr.slice(0, taskNameArr.length - 1);
        var taskName = taskItem.join(' ');
        //var taskName =  e.currentTarget.dataset.testid.split('-')[0];
        var existing_tasks = this.state.tasks;
        existing_tasks.map(task => {
            if (task.name === taskName && task.stage < this.stagesNames.length - 1) {
                task.stage = task.stage + 1;
                return task;
            }
        });
        this.setState({ tasks: existing_tasks });
    }

    arrowBackwardHandler = (e) => {

        var taskNameArr = e.currentTarget.dataset.testid.split('-');
        var taskItem = taskNameArr.slice(0, taskNameArr.length - 1);
        var taskName = taskItem.join(' ');
        //var taskName =  e.currentTarget.dataset.testid.split('-')[0];
        var existing_tasks = this.state.tasks;
        existing_tasks.map(task => {
            if (task.name === taskName && task.stage > 0) {
                task.stage = task.stage - 1;
                return task;
            }
        });
        this.setState({ tasks: existing_tasks });
    }

    deleteTaskHandler = (e) => {
        var deleteTaskName = e.currentTarget.dataset.testid.split('-');
        var deleteItem = deleteTaskName.slice(0, deleteTaskName.length - 1);
        var removeItem = deleteItem.join(' ');
        var existing_tasks = this.state.tasks;
        var updated_tasks = existing_tasks.filter(task => task.name !== removeItem);
        this.setState({ searchTerm: '', tasks: updated_tasks });
    }


    render() {
        const { tasks } = this.state;

        let stagesTasks = [];
        for (let i = 0; i < this.stagesNames.length; ++i) {
            stagesTasks.push([]);
        }
        for (let task of tasks) {
            const stageId = task.stage;
            stagesTasks[stageId].push(task);
        }

        return (
            <div className="mt-20 layout-column justify-content-center align-items-center">
                <section className="mt-50 layout-row align-items-center justify-content-center">
                    <input id="create-task-input" type="text" className="large" placeholder="New task name" data-testid="create-task-input" value={this.state.searchTerm} onChange={this.searchHandler} />
                    <button type="submit" className="ml-30" data-testid="create-task-button" onClick={this.clickAddTaskHandler}>Create task</button>
                </section>

                <div className="mt-50 layout-row">
                    {stagesTasks.map((tasks, i) => {
                        return (
                            <div className="card outlined ml-20 mt-0" key={`${i}`}>
                                <div className="card-text">
                                    <h4>{this.stagesNames[i]}</h4>
                                    <ul className="styled mt-50" data-testid={`stage-${i}`}>
                                        {tasks.map((task, index) => {
                                            return <li className="slide-up-fade-in" key={`${i}${index}`}>
                                                <div className="li-content layout-row justify-content-between align-items-center">
                                                    <span data-testid={`${task.name.split(' ').join('-')}-name`}>{task.name}</span>
                                                    <div className="icons">
                                                        <button onClick={this.arrowBackwardHandler} className="icon-only x-small mx-2" data-testid={`${task.name.split(' ').join('-')}-back`}>
                                                            <i className="material-icons">arrow_back</i>
                                                        </button>
                                                        <button onClick={this.arrowForwardHandler} className="icon-only x-small mx-2" data-testid={`${task.name.split(' ').join('-')}-forward`}>
                                                            <i className="material-icons">arrow_forward</i>
                                                        </button>
                                                        <button onClick={this.deleteTaskHandler} className="icon-only danger x-small mx-2" data-testid={`${task.name.split(' ').join('-')}-delete`}>
                                                            <i className="material-icons">delete</i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </li>
                                        })}
                                    </ul>
                                </div>
                            </div>
                        )
                    })}
                </div>
            </div>
        );
    }
}
